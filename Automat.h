/* 
* Automat.h
*
* Created: 14.05.2023 19:51:05
* Author: Thomas Heß
*/


#ifndef __CLASSAUTOMAT_H__
#define __CLASSAUTOMAT_H__

#include <cstdint>
#include <stddef.h>  // für NULL
#include <stdint.h>
#include "Zustand_Oberklasse.h"
#include "Ereignisse_Transition_Oberklasse.h" // Definition of all possible Events
#include "Automat_Transitionen.h"
#include "Automat_Zustaende.h"
#include "StateMachine.h"
#include "Hardware_Methoden.h" // Damit Automat auf die Hardware (GPIO, ADC, UART, ...) zugreifen kann


/** Define the number of ticks in a second, generated by a timer interrupt */
#define TICKS_PER_SECOND  10 // Timer7 100ms

/** Macro to calculate the number of ticks in a second */
#define Seconds(x)        (x*TICKS_PER_SECOND)

/** Timeout in Seconds */
#define TIMEOUT           15


enum {
	/** Size of Event Queue */
	EventQueueSize = 4
};



class Automat
{
//variables
protected:
private:





	// Zustände, Objekte aus den jeweiligen Zustandsklassen in ClassApplicationStates.h

	 StateInitialisierung   initialisierung;
     StateBereit            bereit;
	 StateEinfahren         einfahren;
     StateHeizen            heizen;
     StateAusfahren         ausfahren;
     StateFehler            fehler;
     

	State* const                initState = &initialisierung; // Erster Zustand nach Pseudo-Start-Zustand

	// Transitionen, Objekte aus den jeweiligen Zustandsklassen in ClassTransitions.h

	Trans_Initialisierung_Bereit    initialisierung2bereit;
    Trans_Bereit_Einfahren          bereit2einfahren;
    Trans_Einfahren_Heizen          einfahren2heizen;
    Trans_Einfahren_Fehler          einfahren2fehler;
    Trans_Heizen_Ausfahren          heizen2ausfahren;
    Trans_Heizen_Ausfahren_Auto     heizen2ausfahren_auto;
    Trans_Ausfahren_Bereit          ausfahren2bereit;
    Trans_Ausfahren_Fehler          ausfahren2fehler;
    Trans_Fehler_Bereit             fehler2bereit;

	// Finite State Machine, Objekt aus StateMachine.h
	StateMachine eineFSM;

	// Zustandsfolgetabelle für diesen Automaten

 
	State2State fsmApp[9] = {
		// currentState State*   transition	ClassTransition*					   nextState State*	altState State*

		{&initialisierung   ,   &initialisierung2bereit     ,                      &bereit          ,    NULL       },
        {&bereit            ,   &bereit2einfahren           ,                      &einfahren       ,    NULL       },
        {&einfahren         ,   &einfahren2heizen           ,                      &heizen          ,    &fehler    },
        {&einfahren         ,   &einfahren2fehler           ,                      &fehler          ,    NULL       },
        {&heizen            ,   &heizen2ausfahren           ,                      &ausfahren       ,    NULL       },
        {&heizen            ,   &heizen2ausfahren_auto      ,                      &ausfahren       ,    NULL       },
        {&ausfahren         ,   &ausfahren2bereit           ,                      &bereit          ,    NULL       },
        {&ausfahren         ,   &ausfahren2fehler           ,                      &fehler          ,    NULL       },
        {&fehler            ,   &fehler2bereit              ,                      &bereit          ,    NULL       }
	};

	volatile Events evQueue[EventQueueSize]; // Feld aus Event-enum, in der die einzelnen aufgetretenen Ereignisse abgelegt werden

//functions
public:
	Automat();
	~Automat();
	 
	/* Initializes the Finite State Machine  */
	void init(); // ruft init() aus StateMachine auf!
	
	/* Send an Event to the Application, note: The Event must be processed by process() */
	void sendEvent(Events); // ruft sendEvent() aus StateMachine auf!
	
	 /* Process Event if one is available and perform change of state, return True if there was an Event available */
	 bool process_StateChange(); // ruft StateChange() aus StateMachine auf!
	 

     uint16_t fsm_get_timeInState(); // ruft get_timeInState() aus der StateMachine auf!

     void fsm_set_timeInState(uint16_t); // ruft set_timeInState() aus der StateMachine auf!
     


}; // ClassAutomat

#endif //__CLASSAUTOMAT_H__